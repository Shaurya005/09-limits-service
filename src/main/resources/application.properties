
spring.application.name=limits-service
spring.config.import=optional:configserver:http://localhost:8888

limits-service.minimum=3
limits-service.maximum=997

#In the previous step, we connected our spring cloud config server to the git repository and in this step let's connect our limits microservice to the Spring Cloud Config Server.
#This would complete the entire chain. Now let's look into the steps in connecting the Limits Microservice to the Spring Cloud Config Server -

#Two very important configurations that we have already made which are important to connecting the limit service to this Spring Cloud Config Server.

#The first one is the configuration in our pom.xml - spring-cloud-starter-config added during project creation with Spring Initializer.
#This is the dependency which will be helping us to talk to the cloud config server.

#And we've configured the URL of the cloud config server with spring.config.import. Where do we want to import the config from? We want to import it from the config server.
#Where is the server? The config server is present at localhost:8888. If you want to make the connection to Config Server mandatory, remove the optional but for now leave it here.

#Now, one other important thing that we need to configure in here is what is the name of this application?
#What configuration in the Cloud Config Server should this application make use of?

#What we want to do is we want this application to make use of the limits-service from limits-service.properties file present in our git repo.
#So we'll use limits-service as the application name in here. So spring.application.name = limits-service.

#So what would happen is when this application restarts, it would use this limits-service as the ID to talk to the config server and it would get the configuration
#back and we would be able to see the values.

#We can see that here in this application.properties, we have the minimum and maximum values configured as 3 and 997.
#And in the conflig server (which is having values from limits-service.properties file of git repo), we have the values configured as 4 and 996.
#What values will be retrieve back now? Let's go and execute the URL - localhost:8080/limits - We see 4 and 996 in json response on screen.

#And these are coming in from our git local repository.

#Let's quickly review how the entire chain is now connected by looking at the startup log of limits-service application.

#You can see - Fetching Config from server at : localhost:8888. And you can see that the name that is being used is limits-service.
#This is the application name that we have configured. And the profile that is being used is default.

#What would happen is limits-service would get the configuration from localhost:8888/limits-service/default, default is the profile. This is URL which we executed earlier.

#So when the limits-service starts up, it executes above URL on the cloud config server and it would get the configuration back.
#And from that, it would actually pick up these values which we see on our response.

#Note one thing that the values in the application.properties have less priority compared to the values which are present in our git repository.

#Congratulations on connecting the entire chain. We have now connected the limit microservice to the Spring Cloud Config server to the git repo.
#If you had any problems, there are two things that you would want to check - One is this application name configured above i.e., limits-service.
#This should match the name of the properties file i.e. limits-service.properties in the git repository.

#And the second thing you would want to check is the path of the config server above i.e. http://localhost:8888.
#So if you pick up this config server path and append /limits-service/default then you should be able to get the configuration back from the config server.

spring.profiles.active=dev

#Earlier we connected limits service to the spring cloud config server and the configuration is stored in a GitHub repository.
#Let's say there are multiple environments for the limits service, a DEV environment, a QA, a stage and a production environment.
#How do you store separate configuration for limits service for these four environments, and how do you make use of it from this spring cloud config server?

#Let's look at that in this specific step. The first thing that we'll start with is to store configuration related to multiple environments in a GitHub repository.

#Earlier, we created the limits-service.properties in the Git local config repo. What I'll do now is actually create similar copies of it with names - limits-service-dev and limits-service-qa.
#This is how you can actually create property files for different environments, and what we'll do is actually go and configure different values in there.

#So in the dev, let's say I would want to configure 5 and 995 and in qa, I'd want to configure 6 and 994. Now, we'd want to pick these values from the config server.

#How does the URL look like? Earlier, this was the URL that we made use of - localhost:8888/limits-service/default.
#Now, if I would want to actually pick up the configuration related to dev, I can say /dev at the last instead of /default. You can see that this would return the values from dev.
#This would also return the default limits-service.properties file, but the values which are configured in limits-service-dev will have higher priority than the values
#which are configured in limits-service.properties. Similarly, you can actually say have /qa in the url at last. The QA properties would be returned along with the default properties
#and when the application is picking it up, it would give preference to values which are in QA properties over the values which are in the default.

#So now we have values for multiple environments picked up from the GitHub repository. How do we make the application take the values from the spring cloud config server?
#The way you can do that is by actually going and configuring a few things in the application.properties of your limits service.

#Typically, whenever you'd want to support multiple environments in a spring application, you'd go for a concept called profiles and you'd actually configure that by saying -

#    spring.profiles.active property in application.properties.

#You can see like "The following profiles are active: dev" in your startup log of the application

#However, one of the things that you would see in startup logs that it's fetching config from server at http://localhost:8888 and the profiles=[default].
#It's still picking up the value of the default profile from the config server. I think this is a bug in the spring cloud config server client.
#So what we'll do is we'll actually go ahead and configure something at one level deeper. You can also configure spring.cloud.config and configure the profile to use.
#So it's like - spring.cloud.config.profile = dev. Now you'd see that it's now picking up the profile dev for the limits service.

#So this is what we wanted to see and let's go over to the URL of limits - localhost:8080/limits and refresh. So it's picking up 5 and 995 and 5 and 995 are the values in dev.
#If you actually go and change the profile for spring.cloud.config.profile to qa, you'd see in the log that it's picking up profiles=[qa]. And I refresh to see values of the QA environment.
#
#There are other things that you can configure in here as well, Earlier, we saw that limits-service is the application name and that is what is used as the name of
#the property file in our git repository. Sp If you don't want to use the name of the application in property file name i.e. if you'd want to actually use a different
#name for your property file then you can also configure it by using a property -
#
#spring.cloud.config.name is equal to whatever name you'd want and that name would be used to fetch the configuration from the spring cloud config server.
#
#The last thing that we would want talk about is how do you configure it for other microservices?
#Let's say I would want to configure the properties for microservice X, microservice Y. How do I do that?
#All that I need to do is to copy limits-service.properties and actually I'll call them microservice-x.properties or microservice-y.properties.
#
#The biggest advantage of going with this approach is now all your configuration related to your application is centralized, and if I would want to have separate properties
#for microservice X in dev and QA can create a dev and QA files as well. By separating out the configuration from your applications, you are making your operations easier.
#Your operations team can control all configuration related to all microservices for multiple environments in a single location.
#So whenever they would want to make a change in an application, they make a change in the GitHub repository and commit it in, and that's it.
#Change is ready and distributed to multiple environments. I'm sure you had a lot of fun in the last few steps talking about centralized configuration.

#spring.cloud.config.profile
#spring.cloud.config.name